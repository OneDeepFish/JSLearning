asProperty(H.parameters,I)){J.set(I,o(H.parameters[I],G))}}}if(B.isFunction(H.Variable)){this.theVariable=new H.Variable(J,k)}else{if(B.isObject(H.Variable)){this.theVariable=H.Variable}else{if(H.Variable in G.templates){this.theVariable=new G.templates[H.Variable](J,k)}else{C("No matching variable template found")
}}}}function f(I,G){this.referencedTags=[];this.id=I.id;this.type=I.type;this.name=I.name;this.conditions=[];this.parameters=I.parameters||{};var H=this;this.getId=function(){return this.id};this.setUp=function(){if(this.theTrigger&&this.theTrigger.setUp&&B.isFunction(this.theTrigger.setUp)){this.theTrigger.setUp(function(P){p.push(P);if(!("event" in P)){return}var L={tags:[],variables:[],metTrigger:null,name:P.event,eventData:P,container:{}};var O,N;if(H.meetsConditions()){y.log("The condition is met for trigger "+H.name,H);L.metTrigger={name:H.name,type:H.type};var M=H.getReferencedTags();for(N=0;N<M.length;N++){if(M[N].hasBlockTrigger(H)){M[N].block();M[N].addDebugValues(L.tags,"Block")}else{if(M[N].hasFireTrigger(H)){M[N].fire();M[N].addDebugVal